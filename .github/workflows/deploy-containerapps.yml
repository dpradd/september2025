name: Build → Push → Terraform Deploy (Container Apps)

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  TF_WORKING_DIR: .github/infra
  IMAGE_NAME: demoapp

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU and docker buildx
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Azure Login (Service Principal)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false

      - name: Terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - name: Terraform apply (create ACR + Container Apps env only)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # target the registry and the environment so we can push image afterwards
          terraform apply -target=azurerm_container_registry.acr -target=azurerm_container_app_environment.env -auto-approve

      - name: Get ACR login server from terraform outputs
        id: tfoutputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "##[group]Terraform outputs"
          terraform output -json
          echo "##[endgroup]"
          ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)
          ACR_NAME=$(terraform output -raw acr_name)
          echo "acr_login_server=${ACR_LOGIN_SERVER}" >> $GITHUB_OUTPUT
          echo "acr_name=${ACR_NAME}" >> $GITHUB_OUTPUT

      - name: Login to ACR with az CLI
        run: |
          az acr login --name ${{ steps.tfoutputs.outputs.acr_name }}

      - name: Set Terraform Azure credentials
        run: |
            echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
            echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Build and push Docker image to ACR
        env:
          ACR_LOGIN_SERVER: ${{ steps.tfoutputs.outputs.acr_login_server }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE=${ACR_LOGIN_SERVER}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          echo "Building image $IMAGE"
          docker build -t $IMAGE .
          docker push $IMAGE
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Terraform apply (create/update Container App using pushed image)
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          CONTAINER_IMAGE: ${{ steps.build_and_push.outputs.image || '' }}
        # We can't directly access the previous step's docker output variable via id-less step.
        # Instead get the image name from the docker client by constructing it again from outputs:
        run: |
          ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)
          IMAGE=${ACR_LOGIN_SERVER}/${{ env.IMAGE_NAME }}:${GITHUB_SHA}
          echo "Applying terraform with image $IMAGE"
          terraform apply -var="container_image=${IMAGE}" -auto-approve

      - name: Show Container App URL (query Azure)
        run: |
          rg=$(terraform output -raw resource_group)
          appname=$(terraform output -raw containerapps_env_id || true)
          # Get container app details via az cli
          az containerapp show --name ${{ vars.CONTAINER_APP_NAME || 'demo-app' }} --resource-group $(terraform output -raw resource_group) --query "configuration.ingress.fqdn" -o tsv || true
